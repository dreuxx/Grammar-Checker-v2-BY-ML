/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./popup.js":
/*!******************!*\
  !*** ./popup.js ***!
  \******************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\ndocument.addEventListener('DOMContentLoaded', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n  var elements, grammarChecker, lastCheckResults, initializeChecker, _initializeChecker, updateStatus, showOutput, showLoading, checkGrammar, _checkGrammar, getLanguageName, addTooltipListeners, copyImprovedText, clearAll;\n  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        clearAll = function _clearAll() {\n          elements.inputText.value = '';\n          elements.outputText.innerHTML = '';\n          elements.copyButton.classList.add('hidden');\n          lastCheckResults = null;\n        };\n        copyImprovedText = function _copyImprovedText() {\n          if (!lastCheckResults) {\n            return;\n          }\n          var text = elements.inputText.value;\n          var correctedText = grammarChecker.applyCorrections(text, lastCheckResults.corrections);\n          navigator.clipboard.writeText(correctedText).then(function () {\n            showOutput('Texto corregido copiado al portapapeles', 'text-green-500');\n\n            // Restaurar después de un momento\n            setTimeout(function () {\n              if (lastCheckResults.corrections.length === 0) {\n                showOutput(\"No se encontraron errores gramaticales en el texto (\".concat(lastCheckResults.language, \").\"), 'text-green-500');\n              } else {\n                var highlightedText = grammarChecker.highlightErrors(text, lastCheckResults.corrections);\n                elements.outputText.innerHTML = \"\\n                        <div class=\\\"mb-2\\\">\\n                            <span class=\\\"font-bold\\\">Idioma detectado:</span> \".concat(getLanguageName(lastCheckResults.language), \"\\n                        </div>\\n                        <div class=\\\"mb-2\\\">\\n                            <span class=\\\"font-bold\\\">Errores encontrados:</span> \").concat(lastCheckResults.corrections.length, \"\\n                        </div>\\n                        <div class=\\\"border p-3 bg-white rounded text-gray-800 max-h-64 overflow-y-auto\\\">\\n                            \").concat(highlightedText, \"\\n                        </div>\\n                        <div class=\\\"mt-2 text-sm text-gray-500\\\">\\n                            Pase el cursor sobre las palabras subrayadas para ver sugerencias.\\n                        </div>\\n                    \");\n                addTooltipListeners();\n              }\n            }, 2000);\n          }, function (err) {\n            console.error('Error al copiar texto: ', err);\n            showOutput('Error al copiar texto', 'text-red-500');\n          });\n        };\n        addTooltipListeners = function _addTooltipListeners() {\n          document.querySelectorAll('.correction').forEach(function (el) {\n            el.addEventListener('mouseover', function () {\n              var tooltip = document.createElement('div');\n              tooltip.className = 'tooltip absolute bg-gray-800 text-white p-2 rounded shadow-lg text-sm z-10';\n              tooltip.style.maxWidth = '250px';\n              var type = this.getAttribute('data-type') === 'spelling' ? 'Ortografía' : 'Gramática';\n              tooltip.innerHTML = \"\\n                    <div class=\\\"font-bold\\\">\".concat(type, \"</div>\\n                    <div>\").concat(this.getAttribute('data-message'), \"</div>\\n                    <div class=\\\"font-bold mt-1 text-green-300\\\">Sugerencia: \").concat(this.getAttribute('data-suggestion'), \"</div>\\n                \");\n              document.body.appendChild(tooltip);\n              var rect = this.getBoundingClientRect();\n              tooltip.style.left = rect.left + 'px';\n              tooltip.style.top = rect.bottom + 10 + 'px';\n              this.addEventListener('mouseout', function () {\n                document.body.removeChild(tooltip);\n              }, {\n                once: true\n              });\n            });\n\n            // Permitir reemplazar errores con un clic\n            el.addEventListener('click', function () {\n              var suggestion = this.getAttribute('data-suggestion');\n              var originalText = elements.inputText.value;\n\n              // Encontrar la posición exacta en el texto original\n              var position = originalText.indexOf(this.textContent);\n              if (position !== -1) {\n                var newText = originalText.substring(0, position) + suggestion + originalText.substring(position + this.textContent.length);\n                elements.inputText.value = newText;\n                // Actualizar la verificación\n                checkGrammar();\n              }\n            });\n          });\n        };\n        getLanguageName = function _getLanguageName(langCode) {\n          var languages = {\n            'en': 'Inglés',\n            'es': 'Español',\n            'fr': 'Francés',\n            'de': 'Alemán',\n            'it': 'Italiano',\n            'pt': 'Portugués',\n            'nl': 'Holandés',\n            'ru': 'Ruso',\n            'ja': 'Japonés',\n            'zh': 'Chino'\n          };\n          return languages[langCode] || langCode;\n        };\n        _checkGrammar = function _checkGrammar3() {\n          _checkGrammar = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n            var text, results, highlightedText;\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  text = elements.inputText.value.trim();\n                  if (!(text === '')) {\n                    _context2.next = 4;\n                    break;\n                  }\n                  showOutput('Por favor, ingrese un texto para revisar.', 'text-red-500');\n                  return _context2.abrupt(\"return\");\n                case 4:\n                  if (!(text.split(/\\s+/).length > 2500)) {\n                    _context2.next = 7;\n                    break;\n                  }\n                  showOutput('El texto excede el límite de 2500 palabras.', 'text-red-500');\n                  return _context2.abrupt(\"return\");\n                case 7:\n                  _context2.prev = 7;\n                  showLoading(true);\n\n                  // Llamar al corrector gramatical\n                  _context2.next = 11;\n                  return grammarChecker.checkGrammar(text);\n                case 11:\n                  results = _context2.sent;\n                  lastCheckResults = results;\n                  if (results.corrections.length === 0) {\n                    showOutput(\"No se encontraron errores gramaticales en el texto (\".concat(results.language, \").\"), 'text-green-500');\n                  } else {\n                    // Generar HTML con errores resaltados\n                    highlightedText = grammarChecker.highlightErrors(text, results.corrections); // Mostrar resultados\n                    elements.outputText.innerHTML = \"\\n                    <div class=\\\"mb-2\\\">\\n                        <span class=\\\"font-bold\\\">Idioma detectado:</span> \".concat(getLanguageName(results.language), \"\\n                    </div>\\n                    <div class=\\\"mb-2\\\">\\n                        <span class=\\\"font-bold\\\">Errores encontrados:</span> \").concat(results.corrections.length, \"\\n                    </div>\\n                    <div class=\\\"border p-3 bg-white rounded text-gray-800 max-h-64 overflow-y-auto\\\">\\n                        \").concat(highlightedText, \"\\n                    </div>\\n                    <div class=\\\"mt-2 text-sm text-gray-500\\\">\\n                        Pase el cursor sobre las palabras subrayadas para ver sugerencias.\\n                    </div>\\n                \");\n\n                    // Agregar listeners para tooltips\n                    addTooltipListeners();\n                  }\n                  elements.copyButton.classList.remove('hidden');\n                  _context2.next = 21;\n                  break;\n                case 17:\n                  _context2.prev = 17;\n                  _context2.t0 = _context2[\"catch\"](7);\n                  console.error('Error:', _context2.t0);\n                  showOutput(\"Error al verificar el texto: \".concat(_context2.t0.message), 'text-red-500');\n                case 21:\n                  _context2.prev = 21;\n                  showLoading(false);\n                  return _context2.finish(21);\n                case 24:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2, null, [[7, 17, 21, 24]]);\n          }));\n          return _checkGrammar.apply(this, arguments);\n        };\n        checkGrammar = function _checkGrammar2() {\n          return _checkGrammar.apply(this, arguments);\n        };\n        showLoading = function _showLoading(isLoading) {\n          elements.loadingIndicator.classList.toggle('hidden', !isLoading);\n          elements.checkButton.disabled = isLoading;\n          elements.clearButton.disabled = isLoading;\n        };\n        showOutput = function _showOutput(message) {\n          var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n          elements.outputText.innerHTML = \"<p class=\\\"\".concat(className, \"\\\">\").concat(message, \"</p>\");\n        };\n        updateStatus = function _updateStatus(message) {\n          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'loading';\n          var statusElem = elements.modelLoadingStatus;\n          if (!statusElem) return;\n          var bgColor, textColor, icon;\n          switch (type) {\n            case 'success':\n              bgColor = 'bg-green-50';\n              textColor = 'text-green-700';\n              icon = '<svg class=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path></svg>';\n              break;\n            case 'error':\n              bgColor = 'bg-red-50';\n              textColor = 'text-red-700';\n              icon = '<svg class=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg>';\n              break;\n            default:\n              bgColor = 'bg-blue-50';\n              textColor = 'text-blue-700';\n              icon = '<svg class=\"w-5 h-5 mr-2 animate-pulse\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path></svg>';\n          }\n          statusElem.className = \"mb-4 p-2 \".concat(bgColor, \" \").concat(textColor, \" rounded flex items-center\");\n          statusElem.innerHTML = \"\".concat(icon, \"<span>\").concat(message, \"</span>\");\n          statusElem.classList.remove('hidden');\n        };\n        _initializeChecker = function _initializeChecker3() {\n          _initializeChecker = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  updateStatus('Inicializando corrector gramatical...', 'loading');\n                  _context.prev = 1;\n                  _context.next = 4;\n                  return grammarChecker.initialize();\n                case 4:\n                  updateStatus('¡Corrector gramatical listo!', 'success');\n\n                  // Ocultar indicador después de un momento\n                  setTimeout(function () {\n                    elements.modelLoadingStatus.classList.add('hidden');\n                  }, 2000);\n\n                  // Habilitar botón\n                  elements.checkButton.disabled = false;\n                  _context.next = 13;\n                  break;\n                case 9:\n                  _context.prev = 9;\n                  _context.t0 = _context[\"catch\"](1);\n                  console.error('Error al inicializar:', _context.t0);\n                  updateStatus(\"Error al inicializar el corrector: \".concat(_context.t0.message), 'error');\n                case 13:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee, null, [[1, 9]]);\n          }));\n          return _initializeChecker.apply(this, arguments);\n        };\n        initializeChecker = function _initializeChecker2() {\n          return _initializeChecker.apply(this, arguments);\n        };\n        // Elementos de la UI\n        elements = {\n          inputText: document.getElementById('inputText'),\n          checkButton: document.getElementById('checkButton'),\n          clearButton: document.getElementById('clearButton'),\n          outputText: document.getElementById('outputText'),\n          loadingIndicator: document.getElementById('loadingIndicator'),\n          copyButton: document.getElementById('copyButton'),\n          modelLoadingStatus: document.getElementById('modelLoadingStatus')\n        }; // Inicializar el corrector gramatical\n        grammarChecker = new GrammarChecker();\n        lastCheckResults = null; // Inicializar la biblioteca\n        _context3.next = 16;\n        return initializeChecker();\n      case 16:\n        // Registrar eventos\n        elements.checkButton.addEventListener('click', checkGrammar);\n        elements.clearButton.addEventListener('click', clearAll);\n        elements.copyButton.addEventListener('click', copyImprovedText);\n\n        // Inicialmente deshabilitar botón hasta que la biblioteca esté lista\n        elements.checkButton.disabled = true;\n      case 20:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _callee3);\n})));\n\n//# sourceURL=webpack://grammar-checker-v1/./popup.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./popup.js"]();
/******/ 	
/******/ })()
;